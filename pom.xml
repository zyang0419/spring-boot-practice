<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.baichou.springboot</groupId>
  <artifactId>demo</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>demo</name>
  <url>http://maven.apache.org</url>


  <properties>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- 这里一定要配置上java的版本，如果是1.7版本的可不用配置 -->

    <java.version>1.8</java.version>
    <springboot.version>1.4.1.RELEASE</springboot.version>
    <springloaded.version>1.2.4.RELEASE</springloaded.version>
    <servlet-api.verion>3.1.0</servlet-api.verion>
    <junit.version>4.12</junit.version>
    <fastjson.version>1.2.18</fastjson.version>
    <jackson-databind.version>2.8.4</jackson-databind.version>
    <jackson.version></jackson.version>
    <httpclient.version>4.5.2</httpclient.version>
    <druid.version>1.0.26</druid.version>
    <shiro-spring.version>1.3.2</shiro-spring.version>

    <!-- 配置你的tomcat版本  不配置tomcat版本的话springboot默认会使用8.x版本的tomcat-->

    <!--<tomcat.version>7.0.55</tomcat.version>-->

  </properties>

  <!-- 父依赖 -->
  <!-- Inherit defaults from Spring Boot -->
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.4.1.RELEASE</version>
  </parent>


  <dependencies>

    <dependency>
      <!-- 导入jar包 -->
      <!-- Add typical dependencies for a web application -->
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <!-- 导入test jar包 -->
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
    </dependency>

    <!-- 模板引擎-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>

    <!-- freemarker -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-freemarker</artifactId>
    </dependency>

    <!-- jpa -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!--spring-boot-configuration:spring boot 配置处理器; -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- 监控管理模块-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <!--
        包含支持UI模版（Velocity，FreeMarker，JasperReports），
        邮件服务， 脚本服务(JRuby)，  缓存Cache（EHCache），
        任务计划Scheduling（uartz）。
     -->

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
    </dependency>
    <!-- 添加redis支持-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-redis</artifactId>
    </dependency>

    <!-- 使用redis保持多个app之间的session一致 -->
    <dependency>
      <groupId>org.springframework.session</groupId>
      <artifactId>spring-session-data-redis</artifactId>
    </dependency>

    <!-- 集成ehcache需要的依赖-->
    <dependency>
      <groupId>net.sf.ehcache</groupId>
      <artifactId>ehcache</artifactId>
    </dependency>

    <!-- shiro ehcache -->
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-ehcache</artifactId>
      <version>${shiro-spring.version}</version>
    </dependency>


    <!-- shiro spring. -->

    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-spring</artifactId>
      <version>${shiro-spring.version}</version>
    </dependency>


    <!-- spring-boot-starter-jdbc 模块  -->
    <!--<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>-->

    <!-- mysql -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
    </dependency>

    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>druid</artifactId>
      <version>${druid.version}</version>
    </dependency>

    <!-- 热启动　每次更改都会重新启动
         devtools可以实现页面热部署（即页面修改后会立即生效，这个可以直接在application.properties文件中配置
         spring.thymeleaf.cache=false来实现），
         实现类文件热部署（类文件修改后不会立即生效），实现对属性文件的热部署。
         即devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机），
         注意：因为其采用的虚拟机机制，该项重启是很快的

    -->
    <!--<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
    </dependency>-->

    <!-- servet-api -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>${servlet-api.verion}</version>
      <scope>provided</scope>
    </dependency>

    <!-- fastjson -->
       <dependency>
         <groupId>com.alibaba</groupId>
         <artifactId>fastjson</artifactId>
         <version>${fastjson.version}</version>
       </dependency>
         <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson-databind.version}</version>
          </dependency>
          <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>${httpclient.version}</version>
          </dependency>

    <!-- junit -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <finalName>demo</finalName>

    <plugins>

      <!--如果是通过parent方式继承spring-boot-starter-parent则不用此插件-->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
          <!--springloaded  hot deploy -->
          <!-- spring热部署　　更改原有方法中的内容　执行build compile改动的文件即可
          　　如果是新增方法　可使用spring-boot-devtools　每次更改都会重新启动-->

          <!--fork :  如果没有该项配置，肯呢个devtools不会起作用，即应用不会restart -->
          <!--<configuration>
              <fork>true</fork>
          </configuration>-->
        <!-- debug
          mvn spring-boot:run -Drun.jvmArguments="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9090"

         ./startup.sh jpda
        -->
    <!--    <configuration>
          <jvmArguments>
            -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005
          </jvmArguments>///////////////////////////////////////////////////////////////////////
        </configuration>-->



        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>springloaded</artifactId>
            <version>${springloaded.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- Spring Boot在编译的时候，是有默认JDK版本的
           添加了plugin之后，需要右键Maven à Update Projects,这时候你可以看到工程根目录下的JRE System Library 版本更改了。
       -->
      <!--<plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>-->

        <!--打包跳过测试插件-->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
                <skip>true</skip>
            </configuration>
        </plugin>

    </plugins>

  </build>


  <!--

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.0.BUILD-SNAPSHOT</version>
    </parent>
-->
    <!-- Additional lines to be added here... -->

  <!-- (you don't need this if you are using a .RELEASE version) -->


  <repositories>
    <repository>
      <id>spring-snapshots</id>
      <url>http://repo.spring.io/snapshot</url>
      <snapshots><enabled>true</enabled></snapshots>
    </repository>
    <repository>
      <id>spring-milestones</id>
      <url>http://repo.spring.io/milestone</url>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>spring-snapshots</id>
      <url>http://repo.spring.io/snapshot</url>
    </pluginRepository>
    <pluginRepository>
      <id>spring-milestones</id>
      <url>http://repo.spring.io/milestone</url>
    </pluginRepository>
  </pluginRepositories>

</project>